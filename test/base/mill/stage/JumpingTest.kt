package base.mill.stage

import base.mill.MoveArray
import base.mill.mill
import base.mill.move
import base.mill.player
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

class JumpingTest {
    @Test
    fun jump() {
        assertEquals(
                mill(
                        player(0, Moving, 0, 0b000_000_000_100_001_100_000_000),
                        player(1, Jumping, 0, 0b000_000_000_010_100_000_010_000)
                ),
                Jumping.moved(
                        mill(
                                player(1, Jumping, 0, 0b000_000_000_010_100_000_000_001),
                                player(0, Moving, 0, 0b000_000_000_100_001_100_000_000)
                        ),
                        move(0, 4)
                )
        )
    }

    @Test
    fun toRemoving() {
        assertEquals(
                mill(
                        player(0, Removing, 0, 0b000_000_000_000_000_000_000_111),
                        player(1, Moving, 0, 0b000_101_000_001_111_000_000_000)
                ),
                Jumping.moved(
                        mill(
                                player(0, Jumping, 0, 0b000_000_000_000_000_000_001_110),
                                player(1, Moving, 0, 0b000_101_000_001_111_000_000_000)
                        ),
                        move(3, 0)
                )
        )
    }

    @Test
    fun otherKeepsMoving() {
        assertEquals(
                mill(
                        player(0, Moving, 0, 0b000_000_000_100_001_100_000_000),
                        player(1, Jumping, 0, 0b000_000_000_010_100_000_010_000)
                ),
                Jumping.moved(
                        mill(
                                player(1, Jumping, 0, 0b000_000_000_010_100_000_000_001),
                                player(0, Moving, 0, 0b000_000_000_100_001_100_000_000)
                        ),
                        move(0, 4)
                )
        )
    }

    @Test
    fun otherKeepsJumping() {
        assertEquals(
                mill(
                        player(0, Jumping, 0, 0b000_000_000_100_001_100_000_000),
                        player(1, Jumping, 0, 0b000_000_000_010_100_000_010_000)
                ),
                Jumping.moved(
                        mill(
                                player(1, Jumping, 0, 0b000_000_000_010_100_000_000_001),
                                player(0, Jumping, 0, 0b000_000_000_100_001_100_000_000)
                        ),
                        move(0, 4)
                )
        )
    }

    @Test
    fun moves() {
        assertEquals(
                MoveArray(
                        intArrayOf(
                                0b000_000_000_000_000_000_000_011,
                                0b000_000_000_000_000_000_001_001,
                                0b000_000_000_000_000_000_100_001,
                                0b000_000_000_000_000_001_000_001,
                                0b000_000_000_000_000_010_000_001,
                                0b000_000_000_000_001_000_000_001,
                                0b000_000_000_001_000_000_000_001,
                                0b000_000_000_100_000_000_000_001,
                                0b000_000_010_000_000_000_000_001,
                                0b000_001_000_000_000_000_000_001,
                                0b000_010_000_000_000_000_000_001,
                                0b010_000_000_000_000_000_000_001,

                                0b000_000_000_000_100_000_000_010,
                                0b000_000_000_000_100_000_001_000,
                                0b000_000_000_000_100_000_100_000,
                                0b000_000_000_000_100_001_000_000,
                                0b000_000_000_000_100_010_000_000,
                                0b000_000_000_000_101_000_000_000,
                                0b000_000_000_001_100_000_000_000,
                                0b000_000_000_100_100_000_000_000,
                                0b000_000_010_000_100_000_000_000,
                                0b000_001_000_000_100_000_000_000,
                                0b000_010_000_000_100_000_000_000,
                                0b010_000_000_000_100_000_000_000,

                                0b000_000_000_010_000_000_000_010,
                                0b000_000_000_010_000_000_001_000,
                                0b000_000_000_010_000_000_100_000,
                                0b000_000_000_010_000_001_000_000,
                                0b000_000_000_010_000_010_000_000,
                                0b000_000_000_010_001_000_000_000,
                                0b000_000_000_011_000_000_000_000,
                                0b000_000_000_110_000_000_000_000,
                                0b000_000_010_010_000_000_000_000,
                                0b000_001_000_010_000_000_000_000,
                                0b000_010_000_010_000_000_000_000,
                                0b010_000_000_010_000_000_000_000
                        )
                ),
                Jumping.moves(
                        mill(
                                player(0, Jumping, 0, 0b000_000_000_010_100_000_000_001),
                                player(1, Moving, 0,  0b101_100_101_000_010_100_010_100)
                        ),
                        MoveArray()
                )
        )
    }
}